// Урок 1. Коллекции и итераторы. Модули
// Скрыть
// Формат сдачи: ссылка на репозиторий.

// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }
const albums = [
  { title: 'DJ Mag', artist: 'Mash Up Mix Bass.', year: '2012' },
  { title: 'Number One', artist: 'Dvj Bazuka Н.', year: '2013' },
  { title: 'Electronic Adventure', artist: 'House RMX Г', year: '2014' },
  { title: 'Electro Bangarang', artist: 'Dvj Swing', year: '2015' },
];

const musicCollection = {
  albums: [...albums],
  [Symbol.iterator]: function () {
    let countAlbums = 0;
    return {
      next: () => {
        if (countAlbums >= this.albums.length) {
          return { done: true };
        } else {
          return {
            value: this.albums[countAlbums++],
            done: false,
          };
        }
      },
    };
  },
};

for (const album of musicCollection) {
  console.log(album.title, album.artist, album.year);
}

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

// Повара и их специализации
const chefsSpecialization = new Map([
  ['Виктор', 'Пицца'],
  ['Ольга', 'Суши'],
  ['Дмитрий', 'Десерты'],
]);

// Блюда и их повара
const dishesAndChefs = new Map([
  ['Пицца "Маргарита"', 'Виктор'],
  ['Пицца "Пепперони"', 'Виктор'],
  ['Суши "Филадельфия"', 'Ольга'],
  ['Суши "Калифорния"', 'Ольга'],
  ['Тирамису', 'Дмитрий'],
  ['Чизкейк', 'Дмитрий'],
]);

// Заказы клиентов
const orders = new Map();

// Функция для добавления заказа клиента
function addOrder(client, dish) {
  if (orders.has(client)) {
    const clientOrders = orders.get(client);
    clientOrders.push(dish);
    orders.set(client, clientOrders);
  } else {
    orders.set(client, [dish]);
  }
}

// Добавление заказов
addOrder('Алексей', 'Пицца "Пепперони"');
addOrder('Алексей', 'Тирамису');
addOrder('Мария', 'Суши "Калифорния"');
addOrder('Мария', 'Пицца "Маргарита"');
addOrder('Ирина', 'Чизкейк');
console.log(orders);

// Вывод заказов
orders.forEach((dishes, client) => {
  console.log(`Клиент ${client} заказал: ${dishes.join(', ')}`);
});

// Функция для получения повара, готовящего указанное блюдо
function getChef(dish) {
  return dishesAndChefs.get(dish);
}

// Вывод повара, готовящего каждое блюдо
dishesAndChefs.forEach((chef, dish) => {
  console.log(`Блюдо "${dish}" готовит повар ${chef}`);
});
